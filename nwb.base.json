{"datasets":[{"doc":"An abstract data type for a dataset.","neurodata_type_def":"NWBData"},{"attributes":[{"doc":"Target dataset that this index applies to.","dtype":{"reftype":"object","target_type":"NWBData"},"name":"target"}],"doc":"Pointers that index data values.","neurodata_type_def":"Index","neurodata_type_inc":"NWBData"},{"attributes":[{"doc":"Description of what these vectors represent.","dtype":"text","name":"description"}],"doc":"A 1-dimensional dataset. This can be indexed using a VectorIndex to encode a 2-dimensional ragged array in 1 dimension. The first vector is at VectorData[0:VectorIndex(0)+1]. The second vector is at VectorData[VectorIndex(0)+1:VectorIndex(1)+1]. And so on.","neurodata_type_def":"VectorData","neurodata_type_inc":"NWBData"},{"attributes":[{"doc":"Reference to the target dataset that this index applies to.","dtype":{"reftype":"object","target_type":"VectorData"},"name":"target"}],"doc":"An array of indices into the first dimension of the target VectorData. Can be used with VectorData to encode a 2-dimensional ragged array in 1 dimension.","neurodata_type_def":"VectorIndex","neurodata_type_inc":"Index"},{"default_name":"element_id","dims":["num_elements"],"doc":"A list of unique identifiers for values within a dataset, e.g. rows of a DynamicTable.","dtype":"int","neurodata_type_def":"ElementIdentifiers","neurodata_type_inc":"NWBData","shape":[null]},{"attributes":[{"doc":"Reference to the DynamicTable object that this region applies to.","dtype":{"reftype":"object","target_type":"DynamicTable"},"name":"table"},{"doc":"Description of what this table region points to.","dtype":"text","name":"description"}],"doc":"A region/index into a DynamicTable.","dtype":"int","neurodata_type_def":"DynamicTableRegion","neurodata_type_inc":"VectorData"},{"attributes":[],"dims":[["num_x","num_y"],["num_x","num_y","(r, g, b)"],["num_x","num_y","(r, g, b, a)"]],"doc":"An abstract data type for an image. Shape can be 2-D (x, y), or 3-D where the third dimension can have three or four elements, e.g. (x, y, (r, g, b)) or (x, y, (r, g, b, a)).","neurodata_type_def":"Image","neurodata_type_inc":"NWBData","shape":[[null,null],[null,null,3],[null,null,4]]}],"groups":[{"doc":"An abstract data type for a generic container storing collections of data and metadata. Base type for all data and metadata containers.","neurodata_type_def":"NWBContainer"},{"doc":"An abstract data type for a generic container storing collections of data, as opposed to metadata.","neurodata_type_def":"NWBDataInterface","neurodata_type_inc":"NWBContainer"},{"attributes":[],"datasets":[{"attributes":[{"doc":"Base unit of measurement for working with the data. Actual stored values are not necessarily stored in these units. To access the data in these units, multiply 'data' by 'conversion'.","dtype":"text","name":"unit"}],"dims":[["num_times"],["num_times","num_DIM2"],["num_times","num_DIM2","num_DIM3"],["num_times","num_DIM2","num_DIM3","num_DIM4"]],"doc":"Data values. Data can be in 1-D, 2-D, 3-D, or 4-D. The first dimension should always represent time. This can also be used to store binary data (e.g., image frames). This can also be a link to data stored in an external file.","name":"data","shape":[[null],[null,null],[null,null,null],[null,null,null,null]]},{"attributes":[{"doc":"Sampling rate, in Hz.","dtype":"float32","name":"rate"},{"doc":"Unit of measurement for time, which is fixed to 'seconds'.","dtype":"text","name":"unit","value":"seconds"}],"doc":"Timestamp of the first sample in seconds. When timestamps are uniformly spaced, the timestamp of the first sample can be specified and all subsequent ones calculated from the sampling rate attribute.","dtype":"float64","name":"starting_time","quantity":"?"},{"attributes":[{"doc":"Value is '1'","dtype":"int32","name":"interval","value":1},{"doc":"Unit of measurement for timestamps, which is fixed to 'seconds'.","dtype":"text","name":"unit","value":"seconds"}],"dims":["num_times"],"doc":"Timestamps for samples stored in data, in seconds, relative to the common experiment master-clock stored in NWBFile.timestamps_reference_time.","dtype":"float64","name":"timestamps","quantity":"?","shape":[null]},{"dims":["num_times"],"doc":"Numerical labels that apply to each time point in data for the purpose of querying and slicing data by these values. If present, the length of this array should be the same size as the first dimension of data.","dtype":"uint8","name":"control","quantity":"?","shape":[null]},{"dims":["num_control_values"],"doc":"Description of each control value. Must be present if control is present. If present, control_description[0] should describe time points where control == 0.","dtype":"text","name":"control_description","quantity":"?","shape":[null]}],"doc":"General purpose time series.","groups":[{"doc":"Lab-specific time and sync information as provided directly from hardware devices and that is necessary for aligning all acquired time information to a common timebase. The timestamp array stores time in the common timebase. This group will usually only be populated in TimeSeries that are stored external to the NWB file, in files storing raw data. Once timestamp data is calculated, the contents of 'sync' are mostly for archival purposes.","name":"sync","quantity":"?"}],"neurodata_type_def":"TimeSeries","neurodata_type_inc":"NWBDataInterface"},{"attributes":[{"doc":"Description of this collection of processed data.","dtype":"text","name":"description"}],"doc":"A collection of processed data.","groups":[{"doc":"Data objects stored in this collection.","neurodata_type_inc":"NWBDataInterface","quantity":"*"}],"neurodata_type_def":"ProcessingModule","neurodata_type_inc":"NWBContainer"},{"attributes":[{"doc":"Description of this collection of images.","dtype":"text","name":"description"}],"datasets":[{"doc":"Images stored in this collection.","neurodata_type_inc":"Image","quantity":"+"}],"default_name":"Images","doc":"A collection of images.","neurodata_type_def":"Images","neurodata_type_inc":"NWBDataInterface"},{"attributes":[{"dims":["num_columns"],"doc":"The names of the columns in this table. This should be used to specify an order to the columns.","dtype":"text","name":"colnames","shape":[null]},{"doc":"Description of what is in this dynamic table.","dtype":"text","name":"description"}],"datasets":[{"dims":["num_rows"],"doc":"Array of unique identifiers for the rows of this dynamic table.","dtype":"int","name":"id","neurodata_type_inc":"ElementIdentifiers","shape":[null]},{"doc":"Vector columns of this dynamic table.","neurodata_type_inc":"VectorData","quantity":"*"},{"doc":"Indices for the vector columns of this dynamic table.","neurodata_type_inc":"VectorIndex","quantity":"*"}],"doc":"A group containing multiple datasets that are aligned on the first dimension (Currently, this requirement if left up to APIs to check and enforce). Apart from a column that contains unique identifiers for each row there are no other required datasets. Users are free to add any number of VectorData objects here. Table functionality is already supported through compound types, which is analogous to storing an array-of-structs. DynamicTable can be thought of as a struct-of-arrays. This provides an alternative structure to choose from when optimizing storage for anticipated access patterns. Additionally, this type provides a way of creating a table without having to define a compound type up front. Although this convenience may be attractive, users should think carefully about how data will be accessed. DynamicTable is more appropriate for column-centric access, whereas a dataset with a compound type would be more appropriate for row-centric access. Finally, data size should also be taken into account. For small tables, performance loss may be an acceptable trade-off for the flexibility of a DynamicTable. For example, DynamicTable was originally developed for storing trial data and spike unit metadata. Both of these use cases are expected to produce relatively small tables, so the spatial locality of multiple datasets present in a DynamicTable is not expected to have a significant performance impact. Additionally, requirements of trial and unit metadata tables are sufficiently diverse that performance implications can be overlooked in favor of usability.","neurodata_type_def":"DynamicTable","neurodata_type_inc":"NWBDataInterface"}]}
